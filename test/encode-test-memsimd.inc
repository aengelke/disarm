// MEMSIMD_MULT
TEST(0x0c407120, de64_LD1_1_8b(DA_V(0), DA_GP(9)));  // ld1 {v0.8b}, [x9]
TEST(0x4c407120, de64_LD1_1_16b(DA_V(0), DA_GP(9))); // ld1 {v0.16b}, [x9]
TEST(0x0c407520, de64_LD1_1_4h(DA_V(0), DA_GP(9)));  // ld1 {v0.4h}, [x9]
TEST(0x4c407520, de64_LD1_1_8h(DA_V(0), DA_GP(9)));  // ld1 {v0.8h}, [x9]
TEST(0x0c407920, de64_LD1_1_2s(DA_V(0), DA_GP(9)));  // ld1 {v0.2s}, [x9]
TEST(0x4c407920, de64_LD1_1_4s(DA_V(0), DA_GP(9)));  // ld1 {v0.4s}, [x9]
TEST(0x0c407d20, de64_LD1_1_1d(DA_V(0), DA_GP(9)));  // ld1 {v0.1d}, [x9]
TEST(0x4c407d20, de64_LD1_1_2d(DA_V(0), DA_GP(9)));  // ld1 {v0.2d}, [x9]
TEST(0x0c40a120, de64_LD1_2_8b(DA_V(0), DA_GP(9)));  // ld1 {v0.8b, v1.8b}, [x9]
TEST(0x4c40a120,
     de64_LD1_2_16b(DA_V(0), DA_GP(9))); // ld1 {v0.16b, v1.16b}, [x9]
TEST(0x0c40a520, de64_LD1_2_4h(DA_V(0), DA_GP(9))); // ld1 {v0.4h, v1.4h}, [x9]
TEST(0x4c40a520, de64_LD1_2_8h(DA_V(0), DA_GP(9))); // ld1 {v0.8h, v1.8h}, [x9]
TEST(0x0c40a920, de64_LD1_2_2s(DA_V(0), DA_GP(9))); // ld1 {v0.2s, v1.2s}, [x9]
TEST(0x4c40a920, de64_LD1_2_4s(DA_V(0), DA_GP(9))); // ld1 {v0.4s, v1.4s}, [x9]
TEST(0x0c40ad20, de64_LD1_2_1d(DA_V(0), DA_GP(9))); // ld1 {v0.1d, v1.1d}, [x9]
TEST(0x4c40ad20, de64_LD1_2_2d(DA_V(0), DA_GP(9))); // ld1 {v0.2d, v1.2d}, [x9]
TEST(0x0c406120, de64_LD1_3_8b(DA_V(0), DA_GP(9))); // ld1 {v0.8b-v2.8b}, [x9]
TEST(0x4c406120,
     de64_LD1_3_16b(DA_V(0), DA_GP(9)));            // ld1 {v0.16b-v2.16b}, [x9]
TEST(0x0c406520, de64_LD1_3_4h(DA_V(0), DA_GP(9))); // ld1 {v0.4h-v2.4h}, [x9]
TEST(0x4c406520, de64_LD1_3_8h(DA_V(0), DA_GP(9))); // ld1 {v0.8h-v2.8h}, [x9]
TEST(0x0c406920, de64_LD1_3_2s(DA_V(0), DA_GP(9))); // ld1 {v0.2s-v2.2s}, [x9]
TEST(0x4c406920, de64_LD1_3_4s(DA_V(0), DA_GP(9))); // ld1 {v0.4s-v2.4s}, [x9]
TEST(0x0c406d20, de64_LD1_3_1d(DA_V(0), DA_GP(9))); // ld1 {v0.1d-v2.1d}, [x9]
TEST(0x4c406d20, de64_LD1_3_2d(DA_V(0), DA_GP(9))); // ld1 {v0.2d-v2.2d}, [x9]
TEST(0x0c402120, de64_LD1_4_8b(DA_V(0), DA_GP(9))); // ld1 {v0.8b-v3.8b}, [x9]
TEST(0x4c402120,
     de64_LD1_4_16b(DA_V(0), DA_GP(9)));            // ld1 {v0.16b-v3.16b}, [x9]
TEST(0x0c402520, de64_LD1_4_4h(DA_V(0), DA_GP(9))); // ld1 {v0.4h-v3.4h}, [x9]
TEST(0x4c402520, de64_LD1_4_8h(DA_V(0), DA_GP(9))); // ld1 {v0.8h-v3.8h}, [x9]
TEST(0x0c402920, de64_LD1_4_2s(DA_V(0), DA_GP(9))); // ld1 {v0.2s-v3.2s}, [x9]
TEST(0x4c402920, de64_LD1_4_4s(DA_V(0), DA_GP(9))); // ld1 {v0.4s-v3.4s}, [x9]
TEST(0x0c402d20, de64_LD1_4_1d(DA_V(0), DA_GP(9))); // ld1 {v0.1d-v3.1d}, [x9]
TEST(0x4c402d20, de64_LD1_4_2d(DA_V(0), DA_GP(9))); // ld1 {v0.2d-v3.2d}, [x9]
TEST(0x0c408120, de64_LD2_8b(DA_V(0), DA_GP(9)));   // ld2 {v0.8b, v1.8b}, [x9]
TEST(0x4c408120, de64_LD2_16b(DA_V(0), DA_GP(9))); // ld2 {v0.16b, v1.16b}, [x9]
TEST(0x0c408520, de64_LD2_4h(DA_V(0), DA_GP(9)));  // ld2 {v0.4h, v1.4h}, [x9]
TEST(0x4c408520, de64_LD2_8h(DA_V(0), DA_GP(9)));  // ld2 {v0.8h, v1.8h}, [x9]
TEST(0x0c408920, de64_LD2_2s(DA_V(0), DA_GP(9)));  // ld2 {v0.2s, v1.2s}, [x9]
TEST(0x4c408920, de64_LD2_4s(DA_V(0), DA_GP(9)));  // ld2 {v0.4s, v1.4s}, [x9]
TEST(0x4c408d20, de64_LD2_2d(DA_V(0), DA_GP(9)));  // ld2 {v0.2d, v1.2d}, [x9]
TEST(0x0c404120, de64_LD3_8b(DA_V(0), DA_GP(9)));  // ld3 {v0.8b-v2.8b}, [x9]
TEST(0x4c404120, de64_LD3_16b(DA_V(0), DA_GP(9))); // ld3 {v0.16b-v2.16b}, [x9]
TEST(0x0c404520, de64_LD3_4h(DA_V(0), DA_GP(9)));  // ld3 {v0.4h-v2.4h}, [x9]
TEST(0x4c404520, de64_LD3_8h(DA_V(0), DA_GP(9)));  // ld3 {v0.8h-v2.8h}, [x9]
TEST(0x0c404920, de64_LD3_2s(DA_V(0), DA_GP(9)));  // ld3 {v0.2s-v2.2s}, [x9]
TEST(0x4c404920, de64_LD3_4s(DA_V(0), DA_GP(9)));  // ld3 {v0.4s-v2.4s}, [x9]
TEST(0x4c404d20, de64_LD3_2d(DA_V(0), DA_GP(9)));  // ld3 {v0.2d-v2.2d}, [x9]
TEST(0x0c400120, de64_LD4_8b(DA_V(0), DA_GP(9)));  // ld4 {v0.8b-v3.8b}, [x9]
TEST(0x4c400120, de64_LD4_16b(DA_V(0), DA_GP(9))); // ld4 {v0.16b-v3.16b}, [x9]
TEST(0x0c400520, de64_LD4_4h(DA_V(0), DA_GP(9)));  // ld4 {v0.4h-v3.4h}, [x9]
TEST(0x4c400520, de64_LD4_8h(DA_V(0), DA_GP(9)));  // ld4 {v0.8h-v3.8h}, [x9]
TEST(0x0c400920, de64_LD4_2s(DA_V(0), DA_GP(9)));  // ld4 {v0.2s-v3.2s}, [x9]
TEST(0x4c400920, de64_LD4_4s(DA_V(0), DA_GP(9)));  // ld4 {v0.4s-v3.4s}, [x9]
TEST(0x4c400d20, de64_LD4_2d(DA_V(0), DA_GP(9)));  // ld4 {v0.2d-v3.2d}, [x9]

// MEMSIMD_SINGLE
TEST(0x0d400060, de64_LD1b(DA_V(0), 0, DA_GP(3)));  // ld1 {v0.b}[0], [x3]
TEST(0x0d600060, de64_LD2b(DA_V(0), 0, DA_GP(3)));  // ld2 {v0.b, v1.b}[0], [x3]
TEST(0x0d402060, de64_LD3b(DA_V(0), 0, DA_GP(3)));  // ld3 {v0.b-v2.b}[0], [x3]
TEST(0x0d602060, de64_LD4b(DA_V(0), 0, DA_GP(3)));  // ld4 {v0.b-v3.b}[0], [x3]
TEST(0x0d400460, de64_LD1b(DA_V(0), 1, DA_GP(3)));  // ld1 {v0.b}[1], [x3]
TEST(0x0d600460, de64_LD2b(DA_V(0), 1, DA_GP(3)));  // ld2 {v0.b, v1.b}[1], [x3]
TEST(0x0d402460, de64_LD3b(DA_V(0), 1, DA_GP(3)));  // ld3 {v0.b-v2.b}[1], [x3]
TEST(0x0d602460, de64_LD4b(DA_V(0), 1, DA_GP(3)));  // ld4 {v0.b-v3.b}[1], [x3]
TEST(0x0d400860, de64_LD1b(DA_V(0), 2, DA_GP(3)));  // ld1 {v0.b}[2], [x3]
TEST(0x0d600860, de64_LD2b(DA_V(0), 2, DA_GP(3)));  // ld2 {v0.b, v1.b}[2], [x3]
TEST(0x0d402860, de64_LD3b(DA_V(0), 2, DA_GP(3)));  // ld3 {v0.b-v2.b}[2], [x3]
TEST(0x0d602860, de64_LD4b(DA_V(0), 2, DA_GP(3)));  // ld4 {v0.b-v3.b}[2], [x3]
TEST(0x0d400c60, de64_LD1b(DA_V(0), 3, DA_GP(3)));  // ld1 {v0.b}[3], [x3]
TEST(0x0d600c60, de64_LD2b(DA_V(0), 3, DA_GP(3)));  // ld2 {v0.b, v1.b}[3], [x3]
TEST(0x0d402c60, de64_LD3b(DA_V(0), 3, DA_GP(3)));  // ld3 {v0.b-v2.b}[3], [x3]
TEST(0x0d602c60, de64_LD4b(DA_V(0), 3, DA_GP(3)));  // ld4 {v0.b-v3.b}[3], [x3]
TEST(0x0d401060, de64_LD1b(DA_V(0), 4, DA_GP(3)));  // ld1 {v0.b}[4], [x3]
TEST(0x0d601060, de64_LD2b(DA_V(0), 4, DA_GP(3)));  // ld2 {v0.b, v1.b}[4], [x3]
TEST(0x0d403060, de64_LD3b(DA_V(0), 4, DA_GP(3)));  // ld3 {v0.b-v2.b}[4], [x3]
TEST(0x0d603060, de64_LD4b(DA_V(0), 4, DA_GP(3)));  // ld4 {v0.b-v3.b}[4], [x3]
TEST(0x0d401460, de64_LD1b(DA_V(0), 5, DA_GP(3)));  // ld1 {v0.b}[5], [x3]
TEST(0x0d601460, de64_LD2b(DA_V(0), 5, DA_GP(3)));  // ld2 {v0.b, v1.b}[5], [x3]
TEST(0x0d403460, de64_LD3b(DA_V(0), 5, DA_GP(3)));  // ld3 {v0.b-v2.b}[5], [x3]
TEST(0x0d603460, de64_LD4b(DA_V(0), 5, DA_GP(3)));  // ld4 {v0.b-v3.b}[5], [x3]
TEST(0x0d401860, de64_LD1b(DA_V(0), 6, DA_GP(3)));  // ld1 {v0.b}[6], [x3]
TEST(0x0d601860, de64_LD2b(DA_V(0), 6, DA_GP(3)));  // ld2 {v0.b, v1.b}[6], [x3]
TEST(0x0d403860, de64_LD3b(DA_V(0), 6, DA_GP(3)));  // ld3 {v0.b-v2.b}[6], [x3]
TEST(0x0d603860, de64_LD4b(DA_V(0), 6, DA_GP(3)));  // ld4 {v0.b-v3.b}[6], [x3]
TEST(0x0d401c60, de64_LD1b(DA_V(0), 7, DA_GP(3)));  // ld1 {v0.b}[7], [x3]
TEST(0x0d601c60, de64_LD2b(DA_V(0), 7, DA_GP(3)));  // ld2 {v0.b, v1.b}[7], [x3]
TEST(0x0d403c60, de64_LD3b(DA_V(0), 7, DA_GP(3)));  // ld3 {v0.b-v2.b}[7], [x3]
TEST(0x0d603c60, de64_LD4b(DA_V(0), 7, DA_GP(3)));  // ld4 {v0.b-v3.b}[7], [x3]
TEST(0x4d400060, de64_LD1b(DA_V(0), 8, DA_GP(3)));  // ld1 {v0.b}[8], [x3]
TEST(0x4d600060, de64_LD2b(DA_V(0), 8, DA_GP(3)));  // ld2 {v0.b, v1.b}[8], [x3]
TEST(0x4d402060, de64_LD3b(DA_V(0), 8, DA_GP(3)));  // ld3 {v0.b-v2.b}[8], [x3]
TEST(0x4d602060, de64_LD4b(DA_V(0), 8, DA_GP(3)));  // ld4 {v0.b-v3.b}[8], [x3]
TEST(0x4d400460, de64_LD1b(DA_V(0), 9, DA_GP(3)));  // ld1 {v0.b}[9], [x3]
TEST(0x4d600460, de64_LD2b(DA_V(0), 9, DA_GP(3)));  // ld2 {v0.b, v1.b}[9], [x3]
TEST(0x4d402460, de64_LD3b(DA_V(0), 9, DA_GP(3)));  // ld3 {v0.b-v2.b}[9], [x3]
TEST(0x4d602460, de64_LD4b(DA_V(0), 9, DA_GP(3)));  // ld4 {v0.b-v3.b}[9], [x3]
TEST(0x4d400860, de64_LD1b(DA_V(0), 10, DA_GP(3))); // ld1 {v0.b}[10], [x3]
TEST(0x4d600860,
     de64_LD2b(DA_V(0), 10, DA_GP(3))); // ld2 {v0.b, v1.b}[10], [x3]
TEST(0x4d402860, de64_LD3b(DA_V(0), 10, DA_GP(3))); // ld3 {v0.b-v2.b}[10], [x3]
TEST(0x4d602860, de64_LD4b(DA_V(0), 10, DA_GP(3))); // ld4 {v0.b-v3.b}[10], [x3]
TEST(0x4d400c60, de64_LD1b(DA_V(0), 11, DA_GP(3))); // ld1 {v0.b}[11], [x3]
TEST(0x4d600c60,
     de64_LD2b(DA_V(0), 11, DA_GP(3))); // ld2 {v0.b, v1.b}[11], [x3]
TEST(0x4d402c60, de64_LD3b(DA_V(0), 11, DA_GP(3))); // ld3 {v0.b-v2.b}[11], [x3]
TEST(0x4d602c60, de64_LD4b(DA_V(0), 11, DA_GP(3))); // ld4 {v0.b-v3.b}[11], [x3]
TEST(0x4d401060, de64_LD1b(DA_V(0), 12, DA_GP(3))); // ld1 {v0.b}[12], [x3]
TEST(0x4d601060,
     de64_LD2b(DA_V(0), 12, DA_GP(3))); // ld2 {v0.b, v1.b}[12], [x3]
TEST(0x4d403060, de64_LD3b(DA_V(0), 12, DA_GP(3))); // ld3 {v0.b-v2.b}[12], [x3]
TEST(0x4d603060, de64_LD4b(DA_V(0), 12, DA_GP(3))); // ld4 {v0.b-v3.b}[12], [x3]
TEST(0x4d401460, de64_LD1b(DA_V(0), 13, DA_GP(3))); // ld1 {v0.b}[13], [x3]
TEST(0x4d601460,
     de64_LD2b(DA_V(0), 13, DA_GP(3))); // ld2 {v0.b, v1.b}[13], [x3]
TEST(0x4d403460, de64_LD3b(DA_V(0), 13, DA_GP(3))); // ld3 {v0.b-v2.b}[13], [x3]
TEST(0x4d603460, de64_LD4b(DA_V(0), 13, DA_GP(3))); // ld4 {v0.b-v3.b}[13], [x3]
TEST(0x4d401860, de64_LD1b(DA_V(0), 14, DA_GP(3))); // ld1 {v0.b}[14], [x3]
TEST(0x4d601860,
     de64_LD2b(DA_V(0), 14, DA_GP(3))); // ld2 {v0.b, v1.b}[14], [x3]
TEST(0x4d403860, de64_LD3b(DA_V(0), 14, DA_GP(3))); // ld3 {v0.b-v2.b}[14], [x3]
TEST(0x4d603860, de64_LD4b(DA_V(0), 14, DA_GP(3))); // ld4 {v0.b-v3.b}[14], [x3]
TEST(0x4d401c60, de64_LD1b(DA_V(0), 15, DA_GP(3))); // ld1 {v0.b}[15], [x3]
TEST(0x4d601c60,
     de64_LD2b(DA_V(0), 15, DA_GP(3))); // ld2 {v0.b, v1.b}[15], [x3]
TEST(0x4d403c60, de64_LD3b(DA_V(0), 15, DA_GP(3))); // ld3 {v0.b-v2.b}[15], [x3]
TEST(0x4d603c60, de64_LD4b(DA_V(0), 15, DA_GP(3))); // ld4 {v0.b-v3.b}[15], [x3]
TEST(0, de64_LD4b(DA_V(0), 16, DA_GP(3)));
TEST(0x0d404060, de64_LD1h(DA_V(0), 0, DA_GP(3))); // ld1 {v0.h}[0], [x3]
TEST(0x0d604060, de64_LD2h(DA_V(0), 0, DA_GP(3))); // ld2 {v0.h, v1.h}[0], [x3]
TEST(0x0d406060, de64_LD3h(DA_V(0), 0, DA_GP(3))); // ld3 {v0.h-v2.h}[0], [x3]
TEST(0x0d606060, de64_LD4h(DA_V(0), 0, DA_GP(3))); // ld4 {v0.h-v3.h}[0], [x3]
TEST(0x0d404860, de64_LD1h(DA_V(0), 1, DA_GP(3))); // ld1 {v0.h}[1], [x3]
TEST(0x0d604860, de64_LD2h(DA_V(0), 1, DA_GP(3))); // ld2 {v0.h, v1.h}[1], [x3]
TEST(0x0d406860, de64_LD3h(DA_V(0), 1, DA_GP(3))); // ld3 {v0.h-v2.h}[1], [x3]
TEST(0x0d606860, de64_LD4h(DA_V(0), 1, DA_GP(3))); // ld4 {v0.h-v3.h}[1], [x3]
TEST(0x0d405060, de64_LD1h(DA_V(0), 2, DA_GP(3))); // ld1 {v0.h}[2], [x3]
TEST(0x0d605060, de64_LD2h(DA_V(0), 2, DA_GP(3))); // ld2 {v0.h, v1.h}[2], [x3]
TEST(0x0d407060, de64_LD3h(DA_V(0), 2, DA_GP(3))); // ld3 {v0.h-v2.h}[2], [x3]
TEST(0x0d607060, de64_LD4h(DA_V(0), 2, DA_GP(3))); // ld4 {v0.h-v3.h}[2], [x3]
TEST(0x0d405860, de64_LD1h(DA_V(0), 3, DA_GP(3))); // ld1 {v0.h}[3], [x3]
TEST(0x0d605860, de64_LD2h(DA_V(0), 3, DA_GP(3))); // ld2 {v0.h, v1.h}[3], [x3]
TEST(0x0d407860, de64_LD3h(DA_V(0), 3, DA_GP(3))); // ld3 {v0.h-v2.h}[3], [x3]
TEST(0x0d607860, de64_LD4h(DA_V(0), 3, DA_GP(3))); // ld4 {v0.h-v3.h}[3], [x3]
TEST(0x4d404060, de64_LD1h(DA_V(0), 4, DA_GP(3))); // ld1 {v0.h}[4], [x3]
TEST(0x4d604060, de64_LD2h(DA_V(0), 4, DA_GP(3))); // ld2 {v0.h, v1.h}[4], [x3]
TEST(0x4d406060, de64_LD3h(DA_V(0), 4, DA_GP(3))); // ld3 {v0.h-v2.h}[4], [x3]
TEST(0x4d606060, de64_LD4h(DA_V(0), 4, DA_GP(3))); // ld4 {v0.h-v3.h}[4], [x3]
TEST(0x4d404860, de64_LD1h(DA_V(0), 5, DA_GP(3))); // ld1 {v0.h}[5], [x3]
TEST(0x4d604860, de64_LD2h(DA_V(0), 5, DA_GP(3))); // ld2 {v0.h, v1.h}[5], [x3]
TEST(0x4d406860, de64_LD3h(DA_V(0), 5, DA_GP(3))); // ld3 {v0.h-v2.h}[5], [x3]
TEST(0x4d606860, de64_LD4h(DA_V(0), 5, DA_GP(3))); // ld4 {v0.h-v3.h}[5], [x3]
TEST(0x4d405060, de64_LD1h(DA_V(0), 6, DA_GP(3))); // ld1 {v0.h}[6], [x3]
TEST(0x4d605060, de64_LD2h(DA_V(0), 6, DA_GP(3))); // ld2 {v0.h, v1.h}[6], [x3]
TEST(0x4d407060, de64_LD3h(DA_V(0), 6, DA_GP(3))); // ld3 {v0.h-v2.h}[6], [x3]
TEST(0x4d607060, de64_LD4h(DA_V(0), 6, DA_GP(3))); // ld4 {v0.h-v3.h}[6], [x3]
TEST(0x4d405860, de64_LD1h(DA_V(0), 7, DA_GP(3))); // ld1 {v0.h}[7], [x3]
TEST(0x4d605860, de64_LD2h(DA_V(0), 7, DA_GP(3))); // ld2 {v0.h, v1.h}[7], [x3]
TEST(0x4d407860, de64_LD3h(DA_V(0), 7, DA_GP(3))); // ld3 {v0.h-v2.h}[7], [x3]
TEST(0x4d607860, de64_LD4h(DA_V(0), 7, DA_GP(3))); // ld4 {v0.h-v3.h}[7], [x3]
TEST(0, de64_LD4h(DA_V(0), 8, DA_GP(3)));
TEST(0x0d408060, de64_LD1s(DA_V(0), 0, DA_GP(3))); // ld1 {v0.s}[0], [x3]
TEST(0x0d608060, de64_LD2s(DA_V(0), 0, DA_GP(3))); // ld2 {v0.s, v1.s}[0], [x3]
TEST(0x0d40a060, de64_LD3s(DA_V(0), 0, DA_GP(3))); // ld3 {v0.s-v2.s}[0], [x3]
TEST(0x0d60a060, de64_LD4s(DA_V(0), 0, DA_GP(3))); // ld4 {v0.s-v3.s}[0], [x3]
TEST(0x0d409060, de64_LD1s(DA_V(0), 1, DA_GP(3))); // ld1 {v0.s}[1], [x3]
TEST(0x0d609060, de64_LD2s(DA_V(0), 1, DA_GP(3))); // ld2 {v0.s, v1.s}[1], [x3]
TEST(0x0d40b060, de64_LD3s(DA_V(0), 1, DA_GP(3))); // ld3 {v0.s-v2.s}[1], [x3]
TEST(0x0d60b060, de64_LD4s(DA_V(0), 1, DA_GP(3))); // ld4 {v0.s-v3.s}[1], [x3]
TEST(0x4d408060, de64_LD1s(DA_V(0), 2, DA_GP(3))); // ld1 {v0.s}[2], [x3]
TEST(0x4d608060, de64_LD2s(DA_V(0), 2, DA_GP(3))); // ld2 {v0.s, v1.s}[2], [x3]
TEST(0x4d40a060, de64_LD3s(DA_V(0), 2, DA_GP(3))); // ld3 {v0.s-v2.s}[2], [x3]
TEST(0x4d60a060, de64_LD4s(DA_V(0), 2, DA_GP(3))); // ld4 {v0.s-v3.s}[2], [x3]
TEST(0x4d409060, de64_LD1s(DA_V(0), 3, DA_GP(3))); // ld1 {v0.s}[3], [x3]
TEST(0x4d609060, de64_LD2s(DA_V(0), 3, DA_GP(3))); // ld2 {v0.s, v1.s}[3], [x3]
TEST(0x4d40b060, de64_LD3s(DA_V(0), 3, DA_GP(3))); // ld3 {v0.s-v2.s}[3], [x3]
TEST(0x4d60b060, de64_LD4s(DA_V(0), 3, DA_GP(3))); // ld4 {v0.s-v3.s}[3], [x3]
TEST(0, de64_LD4s(DA_V(0), 4, DA_GP(3)));
TEST(0x0d408460, de64_LD1d(DA_V(0), 0, DA_GP(3))); // ld1 {v0.d}[0], [x3]
TEST(0x0d608460, de64_LD2d(DA_V(0), 0, DA_GP(3))); // ld2 {v0.d, v1.d}[0], [x3]
TEST(0x0d40a460, de64_LD3d(DA_V(0), 0, DA_GP(3))); // ld3 {v0.d-v2.d}[0], [x3]
TEST(0x0d60a460, de64_LD4d(DA_V(0), 0, DA_GP(3))); // ld4 {v0.d-v3.d}[0], [x3]
TEST(0x4d408460, de64_LD1d(DA_V(0), 1, DA_GP(3))); // ld1 {v0.d}[1], [x3]
TEST(0x4d608460, de64_LD2d(DA_V(0), 1, DA_GP(3))); // ld2 {v0.d, v1.d}[1], [x3]
TEST(0x4d40a460, de64_LD3d(DA_V(0), 1, DA_GP(3))); // ld3 {v0.d-v2.d}[1], [x3]
TEST(0x4d60a460, de64_LD4d(DA_V(0), 1, DA_GP(3))); // ld4 {v0.d-v3.d}[1], [x3]
TEST(0, de64_LD4d(DA_V(0), 2, DA_GP(3)));

// MEMSIMD_REP
TEST(0x0d40c120, de64_LD1R8b(DA_V(0), DA_GP(9)));  // ld1r {v0.8b}, [x9]
TEST(0x4d40c120, de64_LD1R16b(DA_V(0), DA_GP(9))); // ld1r {v0.16b}, [x9]
TEST(0x0d40c520, de64_LD1R4h(DA_V(0), DA_GP(9)));  // ld1r {v0.4h}, [x9]
TEST(0x4d40c520, de64_LD1R8h(DA_V(0), DA_GP(9)));  // ld1r {v0.8h}, [x9]
TEST(0x0d40c920, de64_LD1R2s(DA_V(0), DA_GP(9)));  // ld1r {v0.2s}, [x9]
TEST(0x4d40c920, de64_LD1R4s(DA_V(0), DA_GP(9)));  // ld1r {v0.4s}, [x9]
TEST(0x4d40cd20, de64_LD1R2d(DA_V(0), DA_GP(9)));  // ld1r {v0.2d}, [x9]
TEST(0x0d60c120, de64_LD2R8b(DA_V(0), DA_GP(9)));  // ld2r {v0.8b, v1.8b}, [x9]
TEST(0x4d60c120,
     de64_LD2R16b(DA_V(0), DA_GP(9)));            // ld2r {v0.16b, v1.16b}, [x9]
TEST(0x0d60c520, de64_LD2R4h(DA_V(0), DA_GP(9))); // ld2r {v0.4h, v1.4h}, [x9]
TEST(0x4d60c520, de64_LD2R8h(DA_V(0), DA_GP(9))); // ld2r {v0.8h, v1.8h}, [x9]
TEST(0x0d60c920, de64_LD2R2s(DA_V(0), DA_GP(9))); // ld2r {v0.2s, v1.2s}, [x9]
TEST(0x4d60c920, de64_LD2R4s(DA_V(0), DA_GP(9))); // ld2r {v0.4s, v1.4s}, [x9]
TEST(0x4d60cd20, de64_LD2R2d(DA_V(0), DA_GP(9))); // ld2r {v0.2d, v1.2d}, [x9]
TEST(0x0d40e120, de64_LD3R8b(DA_V(0), DA_GP(9))); // ld3r {v0.8b-v2.8b}, [x9]
TEST(0x4d40e120, de64_LD3R16b(DA_V(0), DA_GP(9))); // ld3r {v0.16b-v2.16b}, [x9]
TEST(0x0d40e520, de64_LD3R4h(DA_V(0), DA_GP(9)));  // ld3r {v0.4h-v2.4h}, [x9]
TEST(0x4d40e520, de64_LD3R8h(DA_V(0), DA_GP(9)));  // ld3r {v0.8h-v2.8h}, [x9]
TEST(0x0d40e920, de64_LD3R2s(DA_V(0), DA_GP(9)));  // ld3r {v0.2s-v2.2s}, [x9]
TEST(0x4d40e920, de64_LD3R4s(DA_V(0), DA_GP(9)));  // ld3r {v0.4s-v2.4s}, [x9]
TEST(0x4d40ed20, de64_LD3R2d(DA_V(0), DA_GP(9)));  // ld3r {v0.2d-v2.2d}, [x9]
TEST(0x0d60e120, de64_LD4R8b(DA_V(0), DA_GP(9)));  // ld4r {v0.8b-v3.8b}, [x9]
TEST(0x4d60e120, de64_LD4R16b(DA_V(0), DA_GP(9))); // ld4r {v0.16b-v3.16b}, [x9]
TEST(0x0d60e520, de64_LD4R4h(DA_V(0), DA_GP(9)));  // ld4r {v0.4h-v3.4h}, [x9]
TEST(0x4d60e520, de64_LD4R8h(DA_V(0), DA_GP(9)));  // ld4r {v0.8h-v3.8h}, [x9]
TEST(0x0d60e920, de64_LD4R2s(DA_V(0), DA_GP(9)));  // ld4r {v0.2s-v3.2s}, [x9]
TEST(0x4d60e920, de64_LD4R4s(DA_V(0), DA_GP(9)));  // ld4r {v0.4s-v3.4s}, [x9]
TEST(0x4d60ed20, de64_LD4R2d(DA_V(0), DA_GP(9)));  // ld4r {v0.2d-v3.2d}, [x9]
